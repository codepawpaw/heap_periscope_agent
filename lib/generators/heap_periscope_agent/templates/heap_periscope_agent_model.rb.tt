# config/initializers/heap_periscope_agent_model.rb
# This file is automatically generated by the heap_periscope_agent gem.
# It instruments Rails model actions to report living objects.

if defined?(Rails) && defined?(ActiveRecord) && Rails.version.to_i >= 3
  ActiveSupport.on_load(:active_record) do
    # Include this module to enable instrumentation for all model actions.
    # Ensure `config.enable_model_instrumentation = true` is set in your
    # main heap_periscope_agent initializer.
    module HeapPeriscopeAgentModelInstrumentation
      extend ActiveSupport::Concern

      included do
        around_save :heap_periscope_agent_track_model_save
        around_destroy :heap_periscope_agent_track_model_destroy
      end

      private

      def heap_periscope_agent_track_model_save
        # This check is duplicated from track_model_destroy but is cheap.
        # It avoids capturing the `is_new_record` flag unnecessarily.
        return yield unless HeapPeriscopeAgent.configuration.enable_model_instrumentation

        is_new_record = new_record?
        yield # Execute the save operation

        # After the action, collect detailed living objects
        detailed_objects = HeapPeriscopeAgent::Collector.collect_detailed_living_objects_for_span(
          HeapPeriscopeAgent.configuration.detailed_objects_limit
        )

        action_name = is_new_record ? 'create' : 'update'
        span_name = "#{self.class.name}##{action_name}"
        HeapPeriscopeAgent::Reporter.add_span_report('model', span_name, detailed_objects)
      end

      def heap_periscope_agent_track_model_destroy
        return yield unless HeapPeriscopeAgent.configuration.enable_model_instrumentation

        yield # Execute the destroy operation

        detailed_objects = HeapPeriscopeAgent::Collector.collect_detailed_living_objects_for_span(
          HeapPeriscopeAgent.configuration.detailed_objects_limit
        )

        span_name = "#{self.class.name}#destroy"
        HeapPeriscopeAgent::Reporter.add_span_report('model', span_name, detailed_objects)
      end
    end

    # Include the instrumentation module into ActiveRecord::Base
    # This makes it apply to all models inheriting from it.
    ActiveRecord::Base.send :include, HeapPeriscopeAgentModelInstrumentation
  end
end